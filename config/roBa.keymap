#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                        &kp T                                                        &kp Y        &kp U  &kp I      &kp O    &kp P
&lt 3 A           &kp S         &kp D         &kp F                        &kp G        &kp ESCAPE                       &trans         &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                        &kp B        &kp TAB                          &kp DEL        &kp N        &kp M  &kp COMMA  &kp DOT  &kp RIGHT_SHIFT
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 1 LANGUAGE_2  &lt 2 SPACE  &lt_to_layer_0 4 LANGUAGE_1      &kp BACKSPACE  &lt 2 ENTER                             &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol {
            bindings = <
&trans  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(NUMBER_0)                             &trans             &kp MINUS  &kp LS(MINUS)  &trans              &trans
&trans  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &trans            &trans      &kp GRAVE      &kp LS(GRAVE)      &kp EQUAL  &kp LS(EQUAL)  &kp LEFT_BRACE      &kp RIGHT_BRACE
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &trans            &trans      &kp BACKSLASH  &kp LS(BACKSLASH)  &kp APOS   &kp LS(APOS)   &kp LS(LEFT_BRACE)  &kp LS(RIGHT_BRACE)
&trans  &trans            &trans            &trans            &trans            &trans      &trans         &trans                                                           &trans
            >;
        };

        Num_Arrow {
            bindings = <
&trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0                      &trans    &trans    &kp UP    &trans     &trans
&trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans      &trans  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp END
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &trans      &trans  &trans    &trans    &trans    &trans     &trans
&trans  &trans        &trans        &trans        &trans        &trans      &trans  &trans                                   &trans
            >;
        };

        Control {
            bindings = <
&trans     &trans     &trans     &trans     &trans                      &trans  &trans  &trans  &trans  &trans
&trans     &kp LC(S)  &trans     &trans     &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LC(Z)  &trans     &kp LC(C)  &kp LC(V)  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans     &trans     &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Function {
            bindings = <
&bt BT_SEL 0  &kp F7  &kp F8  &kp F9  &trans                      &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 1  &kp F4  &kp F5  &kp F6  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 2  &kp F1  &kp F2  &kp F3  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 3  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mo 5   &mkp MB2  &to 0
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
